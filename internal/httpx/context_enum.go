// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.1
// Revision: a6f63bddde05aca4221df9c8e9e6d7d9674b1cb4
// Build Date: 2025-03-18T23:42:14Z
// Built By: goreleaser

package httpx

import (
	"errors"
	"fmt"
)

const (
	// ContextKeySession is a contextKey of type session.
	ContextKeySession ContextKey = "session"
)

var ErrInvalidcontextKey = errors.New("not a valid contextKey")

// String implements the Stringer interface.
func (x ContextKey) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ContextKey) IsValid() bool {
	_, err := ParsecontextKey(string(x))
	return err == nil
}

var _contextKeyValue = map[string]ContextKey{
	"session": ContextKeySession,
}

// ParsecontextKey attempts to convert a string to a contextKey.
func ParsecontextKey(name string) (ContextKey, error) {
	if x, ok := _contextKeyValue[name]; ok {
		return x, nil
	}
	return ContextKey(""), fmt.Errorf("%s is %w", name, ErrInvalidcontextKey)
}

// MarshalText implements the text marshaller method.
func (x ContextKey) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ContextKey) UnmarshalText(text []byte) error {
	tmp, err := ParsecontextKey(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
