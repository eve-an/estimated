// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/eve-an/estimated/internal/api"
	"github.com/eve-an/estimated/internal/api/handlers"
	"github.com/eve-an/estimated/internal/api/middleware"
	"github.com/eve-an/estimated/internal/config"
	"github.com/eve-an/estimated/internal/infra/notify"
	"github.com/eve-an/estimated/internal/infra/store"
	"github.com/eve-an/estimated/internal/service"
	"github.com/go-chi/chi/v5"
	middleware2 "github.com/go-chi/chi/v5/middleware"
	"github.com/google/wire"
	"log/slog"
	"net/http"
	"os"
	"time"
)

// Injectors from wire.go:

func InitializeApp(config2 *config.Config) (*api.Server, error) {
	server := provideHTTPServer(config2)
	logger := provideLogger()
	sessionNotifier := notify.NewSessionNotifier(config2)
	sessionStore := store.NewSessionStore(sessionNotifier)
	voteService := service.NewVoteService(sessionStore, sessionNotifier, logger)
	votesHandler := handlers.NewVotesHandler(logger, voteService)
	sessionHandler := handlers.NewSessionHandler(logger)
	eventService := service.NewEventService(logger, sessionNotifier, voteService)
	eventHandler := handlers.NewEventHandler(logger, eventService)
	application := handlers.NewApplication(votesHandler, sessionHandler, eventHandler)
	middlewareMiddleware := middleware.NewMiddleware(logger)
	handler := provideRouter(application, middlewareMiddleware, config2, logger)
	apiServer := api.NewServer(server, handler)
	return apiServer, nil
}

// wire.go:

var SingletonSet = wire.NewSet(
	provideLogger,
)

var StoreSet = wire.NewSet(store.NewSessionStore, wire.Bind(new(service.VoteStore), new(*store.SessionStore)))

var HandlerSet = wire.NewSet(handlers.NewVotesHandler, handlers.NewSessionHandler, handlers.NewEventHandler, handlers.NewApplication)

var HTTPSet = wire.NewSet(
	provideHTTPServer,
	provideRouter, api.NewServer, middleware.NewMiddleware,
)

var ServiceSet = wire.NewSet(service.NewVoteService, service.NewEventService)

var NotifierSet = wire.NewSet(notify.NewSessionNotifier, wire.Bind(new(notify.Notifier), new(*notify.SessionNotifier)))

func provideLogger() *slog.Logger {
	return slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{
		Level: slog.LevelInfo,
	}))
}

func provideHTTPServer(config2 *config.Config) *http.Server {
	return &http.Server{
		Addr:         config2.ServerAddress,
		ReadTimeout:  time.Duration(config2.ServerTimeout),
		WriteTimeout: time.Duration(config2.ServerTimeout),
		IdleTimeout:  120 * time.Second,
	}
}

func provideRouter(
	app *handlers.Application,
	mw *middleware.Middleware, config2 *config.Config,
	logger *slog.Logger,
) http.Handler {
	r := chi.NewRouter()

	r.Use(middleware2.RequestID)
	r.Use(middleware2.RealIP)
	r.Use(mw.Logging)
	r.Use(middleware2.Recoverer)
	r.Use(mw.AddSessionCookie)
	r.Use(middleware2.Timeout(time.Duration(config2.ServerTimeout) * time.Second))

	return app.RegisterAPIRoutes(r)
}
