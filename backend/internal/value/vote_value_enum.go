// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.1
// Revision: a6f63bddde05aca4221df9c8e9e6d7d9674b1cb4
// Build Date: 2025-03-18T23:42:14Z
// Built By: goreleaser

package value

import (
	"errors"
	"fmt"
)

const (
	// VoteValueOne is a VoteValue of type One.
	VoteValueOne VoteValue = iota + 1
	// VoteValueTwo is a VoteValue of type Two.
	VoteValueTwo
	// VoteValueThree is a VoteValue of type Three.
	VoteValueThree
	// VoteValueFive is a VoteValue of type Five.
	VoteValueFive VoteValue = iota + 2
	// VoteValueEight is a VoteValue of type Eight.
	VoteValueEight VoteValue = iota + 4
)

var ErrInvalidVoteValue = errors.New("not a valid VoteValue")

const _VoteValueName = "onetwothreefiveeight"

var _VoteValueMap = map[VoteValue]string{
	VoteValueOne:   _VoteValueName[0:3],
	VoteValueTwo:   _VoteValueName[3:6],
	VoteValueThree: _VoteValueName[6:11],
	VoteValueFive:  _VoteValueName[11:15],
	VoteValueEight: _VoteValueName[15:20],
}

// String implements the Stringer interface.
func (x VoteValue) String() string {
	if str, ok := _VoteValueMap[x]; ok {
		return str
	}
	return fmt.Sprintf("VoteValue(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x VoteValue) IsValid() bool {
	_, ok := _VoteValueMap[x]
	return ok
}

var _VoteValueValue = map[string]VoteValue{
	_VoteValueName[0:3]:   VoteValueOne,
	_VoteValueName[3:6]:   VoteValueTwo,
	_VoteValueName[6:11]:  VoteValueThree,
	_VoteValueName[11:15]: VoteValueFive,
	_VoteValueName[15:20]: VoteValueEight,
}

// ParseVoteValue attempts to convert a string to a VoteValue.
func ParseVoteValue(name string) (VoteValue, error) {
	if x, ok := _VoteValueValue[name]; ok {
		return x, nil
	}
	return VoteValue(0), fmt.Errorf("%s is %w", name, ErrInvalidVoteValue)
}

// MarshalText implements the text marshaller method.
func (x VoteValue) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *VoteValue) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseVoteValue(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
