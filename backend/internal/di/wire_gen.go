// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/eve-an/estimated/internal/api/handlers"
	"github.com/eve-an/estimated/internal/api/mapper"
	"github.com/eve-an/estimated/internal/api/middleware"
	"github.com/eve-an/estimated/internal/config"
	"github.com/eve-an/estimated/internal/infra/notify"
	"github.com/eve-an/estimated/internal/infra/store"
	"github.com/eve-an/estimated/internal/service"
	"github.com/go-chi/chi/v5"
	middleware2 "github.com/go-chi/chi/v5/middleware"
	"github.com/google/wire"
	"log/slog"
	"net/http"
	"os"
	"strings"
	"time"
)

// Injectors from wire.go:

func InitializeApp(config2 *config.Config) (http.Handler, error) {
	logger := ProvideLogger()
	sessionNotifier := notify.NewSessionNotifier(config2)
	sessionStore := store.NewSessionStore(sessionNotifier)
	voteService := service.NewVoteService(sessionStore, sessionNotifier, logger)
	voteMapper := mapper.NewVoteMapper(logger)
	nameGenerator := service.NewNameGenerator()
	votesHandler := handlers.NewVotesHandler(logger, voteService, voteMapper, nameGenerator)
	sessionHandler := handlers.NewSessionHandler(logger, nameGenerator)
	eventService := service.NewEventService(logger, sessionNotifier, voteService, voteMapper)
	eventHandler := handlers.NewEventHandler(logger, eventService)
	middlewareMiddleware := middleware.NewMiddleware(logger)
	handler := ProvideRouter(votesHandler, sessionHandler, eventHandler, middlewareMiddleware, config2)
	return handler, nil
}

// wire.go:

var SingletonSet = wire.NewSet(
	ProvideLogger,
)

var StoreSet = wire.NewSet(store.NewSessionStore, wire.Bind(new(service.VoteStore), new(*store.SessionStore)))

var HandlerSet = wire.NewSet(handlers.NewVotesHandler, handlers.NewSessionHandler, handlers.NewEventHandler)

var HTTPSet = wire.NewSet(
	ProvideRouter, middleware.NewMiddleware,
)

var ServiceSet = wire.NewSet(mapper.NewVoteMapper, service.NewNameGenerator, service.NewVoteService, service.NewEventService)

var NotifierSet = wire.NewSet(notify.NewSessionNotifier, wire.Bind(new(notify.Notifier), new(*notify.SessionNotifier)))

var ApplicationSet = wire.NewSet(
	SingletonSet,
	StoreSet,
	ServiceSet,
	NotifierSet,
	HTTPSet,
	HandlerSet,
)

func ProvideLogger() *slog.Logger {
	levelStr := strings.ToUpper(os.Getenv("LOG_LEVEL"))

	debugLevel := slog.LevelInfo
	switch levelStr {
	case "DEBUG":
		debugLevel = slog.LevelDebug
	case "WARN":
		debugLevel = slog.LevelWarn
	case "ERROR":
		debugLevel = slog.LevelError
	default:
		debugLevel = slog.LevelInfo
	}

	s := slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{
		Level: debugLevel,
	}))
	slog.SetDefault(s)

	return s
}

func ProvideRouter(
	votesHandler *handlers.VotesHandler,
	sessionHandler *handlers.SessionHandler,
	eventHandler *handlers.EventHandler,
	mw *middleware.Middleware, config2 *config.Config,
) http.Handler {
	r := chi.NewRouter()

	r.Use(middleware2.RequestID)
	r.Use(middleware2.RealIP)
	r.Use(mw.Logging)
	r.Use(middleware2.Recoverer)
	r.Use(mw.AddSessionCookie)
	r.Use(middleware2.Timeout(time.Duration(config2.ServerTimeout) * time.Second))

	r.Route("/api/v1", func(r chi.Router) {
		r.Mount("/votes", votesHandler.Routes())
		r.Mount("/register", sessionHandler.Routes())
		r.Mount("/events", eventHandler.Routes())
	})

	return r
}
